local Console =  loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/STX"))()
local ConsoleLog = Console:Window({
    Title = "Http Spy | v0.12",
    Position = UDim2.new(0.5, 0, 0.5, 0),
    DragSpeed = 12
})

ConsoleLog:Prompt({
    Title = "Welcome "..game.Players.LocalPlayer.DisplayName.. " To Http Spy v0.12",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
ConsoleLog:Prompt({
    Title = "You Executor: "..identifyexecutor(),
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})

if identifyexecutor() == "Krnl" then
ConsoleLog:Prompt({
    Title = "Support: true ",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
elseif identifyexecutor() == "Synapse X" then
ConsoleLog:Prompt({
    Title = "Support: true ",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
elseif identifyexecutor() == "Trigon" then
ConsoleLog:Prompt({
    Title = "Support: Maybe ",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
elseif identifyexecutor() == "Fluxus" then
ConsoleLog:Prompt({
    Title = "Support: Maybe ",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
elseif identifyexecutor() == "WRD-API" then
ConsoleLog:Prompt({
    Title = "Support: Maybe ",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
else
ConsoleLog:Prompt({
    Title = "Support: False (or Idk What Executor You Are Using) ",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
end
ConsoleLog:Prompt({
    Title = "This Log:",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})

ConsoleLog:Prompt({
    Title = "syn.request",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})


ConsoleLog:Prompt({
    Title = "HttpGet",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})

ConsoleLog:Prompt({
    Title = "HttpGetAsync",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})

ConsoleLog:Prompt({
    Title = "HttpPost",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})

ConsoleLog:Prompt({
    Title = "HttpPostAsync",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})


ConsoleLog:Prompt({
    Title = "--------------------------------------",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})

local old;
old = hookfunction(game.HttpGet, function(a,b,...)
ConsoleLog:Prompt({
    Title = "   [-] Method: Http Get".." | Url: "..b.."\n Copied To You ClipBoard!",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "succes"
})
    setclipboard("   [-] Method: Http Get".." | Url: "..b.."\n")
    return old(a,b,...) 
end)
ConsoleLog:Prompt({
    Title = "     [-] Applied http get hook\n",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "nofitication"
})
print("     [-] Applied http get hook\n")

local old;
old = hookfunction(game.HttpGetAsync, function(a,b,...)
ConsoleLog:Prompt({
    Title = "   [-] Method: Http Get Async".." | Url: "..b.."\n Copied To You ClipBoard!",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "succes"
})
  setclipboard("   [-] Method: Http Get Async".." | Url: "..b.."\n")
    return old(a,b,...) 
end)
print("     [-] Applied http get async hook\n")
ConsoleLog:Prompt({
    Title = "     [-] Applied http get Async hook\n",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "notification"
})
local old;
old = hookfunction(game.HttpPost, function(a,b,...)
ConsoleLog:Prompt({
    Title = "   [-] Method: Http Post".." | Url: "..b.."\n Copied To You ClipBoard!",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "succes"
})
   setclipboard("   [-] Method: Http Post".." | Url: "..b.."\n")
    return old(a,b,...) 
end)
print("     [-] Applied http post hook\n")
ConsoleLog:Prompt({
    Title = "     [-] Applied Http Post hook\n",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "nofitication"
})
local old;
old = hookfunction(game.HttpPostAsync, function(a,b,...)
ConsoleLog:Prompt({
    Title = "   [-] Method: Http Post Async".." | Url: "..b.."\n Copied To You ClipBoard!",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "succes"
})
   setclipboard("   [-] Method: Http Post Async".." | Url: "..b.."\n")
    return old(a,b,...) 
end)
print("     [-] Applied http post async hook\n")
ConsoleLog:Prompt({
    Title = "     [-] Applied Http Post Async hook\n",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "nofitication"
})
if syn then
local old = syn.request
setreadonly(syn, false)
syn.request = function(data)
ConsoleLog:Prompt({
    Title = "   [-] Method: Syn Request".." | Url: "..b.."\n Copied To You ClipBoard!",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "succes"
})
     setclipboard("   [-] Method: Syn Request".." | Url: "..data.Url.."\n")

    return old(data)
end setreadonly(syn, true) end
print("     [-] Applied syn request hook\n\n")

     ConsoleLog:Prompt({
    Title = "     [-] Applied Syn Request hook\n",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "nofitication"
})

ConsoleLog:Prompt({
    Title = "--------------------------------------",
    TypesWeHave = {
        "default",
        "success",
        "fail",
        "warning",
        "nofitication"
    },
    Type = "default"
})
